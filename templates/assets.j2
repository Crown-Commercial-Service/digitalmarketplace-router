{% from "_macros.j2" import proxy_headers with context %}
{% from "_macros.j2" import prepare_trace_header_values with context %}
server {
    listen 80;
    server_name assets.*;
    error_page 400 401 402 403 404 505 = /404;

    {% for user_ip in user_ips.split(",") %}
    allow {{ user_ip }};
    {% endfor %}
    deny all;

    {{ prepare_trace_header_values() }}

    {{ proxy_headers() }}

    # Absolute matches
    # We want to serve a blank favicon on this domain as we cannot guarantee the content it will appear above (service
    # documents, user uploaded pdfs etc.). The blank favicon stops 404s propagating past this point.
    location = /favicon.ico {
        empty_gif;
    }


    # Case sensitive regex matches ~ (these are tried in order) ([^/] means any non-slash character)
    set $g7_draft_documents_s3_url {{ g7_draft_documents_s3_url }};
    set $frontend_url {{ frontend_url }};
    set $static_files_root {{ static_files_root }};
    set $documents_s3_url {{ documents_s3_url }};
    set $agreements_s3_url {{ agreements_s3_url }};
    set $communications_s3_url {{ communications_s3_url }};
    set $submissions_s3_url {{ submissions_s3_url }};
    set $reports_s3_url {{ reports_s3_url }};

    location ~ (^/g-cloud-7-updates/communications($|/$|/.+$)) {
        proxy_intercept_errors on;

        proxy_pass $g7_draft_documents_s3_url$1$is_args$args;
    }

    location ~ (^/g-cloud-7($|/$|/.+$)) {
        proxy_intercept_errors on;

        proxy_pass $g7_draft_documents_s3_url$1$is_args$args;
    }

    location ~ (^/404$) {
        {{ proxy_headers () }}
        proxy_set_header Authorization "Basic {{ app_auth }}";
        proxy_pass $frontend_url$1$is_args$args;
    }

    location ~ (^/static($|/$|/.+$)) {
        proxy_pass $frontend_url$1$is_args$args;
    }

    location ~ (^/robots.txt$) {
        alias $static_files_root/robots_assets.txt;
    }

    location ~ (^/[^/]+/documents/.*) {
        proxy_intercept_errors on;

        proxy_pass $documents_s3_url$1$is_args$args;
    }

    location ~ (^/[^/]+/agreements/.*) {
        proxy_intercept_errors on;

        proxy_pass $agreements_s3_url$1$is_args$args;
    }

    location ~ (^/[^/]+/communications/.*) {
        proxy_intercept_errors on;

        proxy_pass $communications_s3_url$1$is_args$args;
    }

    location ~ (^/[^/]+/submissions/.*) {
        proxy_intercept_errors on;

        proxy_pass $submissions_s3_url$1$is_args$args;
    }

    location ~ (^/[^/]+/reports/.*) {
        proxy_intercept_errors on;

        proxy_pass $reports_s3_url$1$is_args$args;
    }

    # Regex catch all

    location ~ (/.*) {
        proxy_intercept_errors on;

        proxy_pass $documents_s3_url$1$is_args$args;
    }
}
